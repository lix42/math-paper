// flow-typed signature: 172c351f56e5fcd5a815e896882caf61
// flow-typed version: <<STUB>>/eslint-plugin-ramda_v^2.5.1/flow_v0.80.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'eslint-plugin-ramda'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module "eslint-plugin-ramda" {
  declare module.exports: any;
}

/**
 * We include stubs for each file inside this npm package in case you need to
 * require those files directly. Feel free to delete any files that aren't
 * needed.
 */
declare module "eslint-plugin-ramda/ast-helper" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/always-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/any-pass-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/both-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/complement-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/compose-pipe-style" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/compose-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/cond-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/either-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/eq-by-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/filter-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/if-else-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/map-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/merge-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/no-redundant-and" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/no-redundant-not" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/no-redundant-or" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/pipe-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/prefer-both-either" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/prefer-complement" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/prefer-ramda-boolean" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/prop-satisfies-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/reduce-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/reject-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/set-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/unless-simplification" {
  declare module.exports: any;
}

declare module "eslint-plugin-ramda/rules/when-simplification" {
  declare module.exports: any;
}

// Filename aliases
declare module "eslint-plugin-ramda/ast-helper.js" {
  declare module.exports: $Exports<"eslint-plugin-ramda/ast-helper">;
}
declare module "eslint-plugin-ramda/index" {
  declare module.exports: $Exports<"eslint-plugin-ramda">;
}
declare module "eslint-plugin-ramda/index.js" {
  declare module.exports: $Exports<"eslint-plugin-ramda">;
}
declare module "eslint-plugin-ramda/rules/always-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/always-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/any-pass-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/any-pass-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/both-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/both-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/complement-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/complement-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/compose-pipe-style.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/compose-pipe-style"
  >;
}
declare module "eslint-plugin-ramda/rules/compose-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/compose-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/cond-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/cond-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/either-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/either-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/eq-by-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/eq-by-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/filter-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/filter-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/if-else-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/if-else-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/map-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/map-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/merge-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/merge-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/no-redundant-and.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/no-redundant-and"
  >;
}
declare module "eslint-plugin-ramda/rules/no-redundant-not.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/no-redundant-not"
  >;
}
declare module "eslint-plugin-ramda/rules/no-redundant-or.js" {
  declare module.exports: $Exports<"eslint-plugin-ramda/rules/no-redundant-or">;
}
declare module "eslint-plugin-ramda/rules/pipe-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/pipe-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/prefer-both-either.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/prefer-both-either"
  >;
}
declare module "eslint-plugin-ramda/rules/prefer-complement.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/prefer-complement"
  >;
}
declare module "eslint-plugin-ramda/rules/prefer-ramda-boolean.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/prefer-ramda-boolean"
  >;
}
declare module "eslint-plugin-ramda/rules/prop-satisfies-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/prop-satisfies-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/reduce-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/reduce-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/reject-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/reject-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/set-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/set-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/unless-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/unless-simplification"
  >;
}
declare module "eslint-plugin-ramda/rules/when-simplification.js" {
  declare module.exports: $Exports<
    "eslint-plugin-ramda/rules/when-simplification"
  >;
}
